// (Les classes précédentes restent inchangées...)

// Fichier : model/Avis.java
package model;

import java.time.LocalDateTime;

public class Avis {
    private int id;
    private int idUtilisateur;
    private int idArticle;
    private int note;
    private String commentaire;
    private LocalDateTime dateAvis;

    public Avis(int id, int idUtilisateur, int idArticle, int note, String commentaire, LocalDateTime dateAvis) {
        this.id = id;
        this.idUtilisateur = idUtilisateur;
        this.idArticle = idArticle;
        this.note = note;
        this.commentaire = commentaire;
        this.dateAvis = dateAvis;
    }

    // Getters
    public int getId() { return id; }
    public int getIdUtilisateur() { return idUtilisateur; }
    public int getIdArticle() { return idArticle; }
    public int getNote() { return note; }
    public String getCommentaire() { return commentaire; }
    public LocalDateTime getDateAvis() { return dateAvis; }

    // Setters
    public void setId(int id) { this.id = id; }
    public void setIdUtilisateur(int idUtilisateur) { this.idUtilisateur = idUtilisateur; }
    public void setIdArticle(int idArticle) { this.idArticle = idArticle; }
    public void setNote(int note) { this.note = note; }
    public void setCommentaire(String commentaire) { this.commentaire = commentaire; }
    public void setDateAvis(LocalDateTime dateAvis) { this.dateAvis = dateAvis; }
}

// Fichier : dao/AvisDAO.java
package dao;

import model.Avis;
import utils.DataBaseConnection;

import java.sql.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class AvisDAO {

    public void ajouterAvis(Avis avis) {
        String query = "INSERT INTO avis (id_utilisateur, id_article, note, commentaire, date_avis) VALUES (?, ?, ?, ?, ?)";

        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {

            pstmt.setInt(1, avis.getIdUtilisateur());
            pstmt.setInt(2, avis.getIdArticle());
            pstmt.setInt(3, avis.getNote());
            pstmt.setString(4, avis.getCommentaire());
            pstmt.setTimestamp(5, Timestamp.valueOf(avis.getDateAvis()));
            pstmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<Avis> getAvisByArticle(int idArticle) {
        List<Avis> avisList = new ArrayList<>();
        String query = "SELECT * FROM avis WHERE id_article = ? ORDER BY date_avis DESC";

        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {

            pstmt.setInt(1, idArticle);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                Avis avis = new Avis(
                        rs.getInt("id"),
                        rs.getInt("id_utilisateur"),
                        rs.getInt("id_article"),
                        rs.getInt("note"),
                        rs.getString("commentaire"),
                        rs.getTimestamp("date_avis").toLocalDateTime()
                );
                avisList.add(avis);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return avisList;
    }
} 
